1.讲一讲MVVM

M表示model,V表示View,VM表示ViewModel,MVC中的controller演变成了ViewModel，M层代表数据模型，V表示视图UI层，
ViewModel是M层和V层连接的桥梁，数据都绑定在了ViewModel里面并自动渲染到页面中，当视图数据发生变化的时候会
通知ViewModel层更新数据


2.Vue2.x响应式数据原理

vue初始化的时候会使用Object.defineProperty重新定义组件中的属性，当页面用到了其属性的时候框架内部会收集
依赖(组件中的Watcher)，如果属性发生了变化框架内部就会通知相关依赖进行更新操作（发布订阅）


3.vue3.x响应式数据原理

Vue3.x底层是使用Proxy来替代Object.defineProperty。Proxy可以直接监听数组和对象的变化，并且有是多种拦截方法。


4.Vue2.x是怎么监测数组变化

使用了函数劫持，重写了数组的方法，Vue将data中的数组进行了原型链重写，指向了自己定义的数组方法。当调用数组API时，则会通知依赖更新。
如果数组中包含引用类型，则会对引用类型进行递归遍历监控，这样就实现了监控数组变化

5.nextTick原理

页面渲染完成后调用，nextTick主要使用宏任务和微任务，根据执行环境分别尝试使用：promise、MutationObserver、setImmediate、setTimeout


6.Vue的生命周期

beforeCreated
vue初始化后触发的第一个钩子，在此阶段methods,componted,data都不能访问

created
vue实例创建完成后,此阶段虚拟Dom已经创建完成，可以对数据进行访问和更改，但是不能触发update函数,无法对Dom进行相关操作

beforeMounted
Dom挂载前，此阶段也可以对数据进行访问和更改，但是也不能触发update函数

mounted
Dom挂载完成,此阶段数据完成了双向绑定，可以对Dom进行相关操作

beforeUpdate
发生在更新之前，虚拟Dom重新渲染之前触发，可以在此阶段更改数据，不会重新渲染

update
更新完成之后，当前阶段Dom已完成更新，避免在此阶段更改数据，防止无限循环更新

beforeDestory
实例销毁之前，当前阶段实例还可以正常使用

destory
实例完全被销毁后，次阶段Dom已被拆分，数据绑定被卸除


7.请求数据的接口一般放在哪个生命周期中
一般放在mounted里面

8.Computed和Watch的区别
Computed：支持缓存，只有依赖的数据发生变化的时候才会进行计算。不支持异步操作。如果一个属性依赖其他属性，则用Computed
Watch：不支持缓存，可以进行异步操作。如果一个属性发生变化需要进行相关操作则用Watch。deep设置为true时可以进行深度监测，immediate:true时组件加载立即触发

9.v-if和v-show的区别
都能使组件显示和隐藏，当条件不成立时v-if不会渲染DOM，v-show是操作的display


10.组件中的data为什么是一个函数
组件被多次复用会创建多个实例，本质上这些实例都是构造函数，如果data是对象，对象是引用类型，则会造成组件之间的冲突，所以data是函数

11.Vue事件绑定原理
原生事件的绑定用addEventListener,组件事件绑定是通过vue自定义的$on实现的

12.v-model的原理
v-model本质上就是一个语法糖，可以看成value+input方法的语法糖，会根据标签的不同生成不同的事件和属性

13.Vue模板编译原理
Vue编译过程就是将template转化为render函数的过程。
1.生成AST树。--解析模板生成AST树，即一种javascript
对象的形式来描述整个模板。使用大量的正则表达式对模板进行解析、遇到标签、文本的时候都会执行对应的钩子
函数进行处理
2.深度遍历AST树，按照相关条件对树节点进行标记，这些被标记的节点我们就可以跳过他们的比对，对运行时的模板起到了很大的优化作用
3.codegen 把优化后的AST树转换成可执行的代码

14.Vue2.x和Vue3.x渲染器的diff算法
1.同级比较，再比较子节点
2.先判断一方有子节点一方没有子节点的情况，如果新的children没有子节点，将旧的子节点移除
3.比较都有子节点的情况
4.递归比较子节点
Vue2.x的核心Diff算法采用了双端比较的算法。同时从新旧children两端开始比较，借助key值找到可复用的节点。
Vue3.x借鉴了ivi算法和inferno算法


15.虚拟DOM以及Key属性的作用
由于浏览器操作DOM是很昂贵的，频繁操作DOM会产生一定的性能问题，这时就用到了虚拟DOM，其本质就是用原生js对象去描述一个DOM节点，对真实DOM的一层抽象
key的作用是使节点具有唯一性，尽可能的复用DOM元素。



16.keep-alive
keep-alive可以实现组件缓存，当组件切换的时候不会对当前组件进行卸载，常用的属性include/exclude允许组件有条件的进行缓存。两个生命周期activated/deactivated用来的知当前组件是否处于活跃状态

17.Vue中组件生命周期调用顺序
父进子出原则

18.Vue2.x组件通信方式
父组件》子组件 props
子组件》父组件$emit、$on
兄弟组件之间通信Vuex、EVENT Bus

19.SSR
服务端渲染，在服务端把Vue渲染成HTML，然后返回给客户端

20.Vue性能优化
尽量减少Data中的属性、v-for的元素绑定事件用事件代理、spa页面采用keep-alive缓存组件、key保证唯一、防抖和节流、图片懒加载、缓存的使用、压缩代码、使用图片精灵

21.hash路由和history路由原理
